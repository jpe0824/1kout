// This file is auto-generated by @hey-api/openapi-ts

export type BodyCreateLog = {
  start_time: string;
  end_time: string;
};

export type BodyLogin = {
  grant_type?: string | null;
  username: string;
  password: string;
  scope?: string;
  client_id?: string | null;
  client_secret?: string | null;
};

export type BodyRegisterUser = {
  password: string;
  email: string;
  first_name?: string;
  last_name?: string;
  nick_name?: string;
};

export type HttpValidationError = {
  detail?: Array<ValidationError>;
};

/**
 * Log properties returned by API
 */
export type Log = {
  start_time: string;
  end_time: string;
  uuid: string;
};

export type LogHours = {
  start_time: string;
  end_time: string;
  uuid: string;
  hours: string;
};

/**
 * Same properties as logbase
 */
export type LogUpdate = {
  start_time: string;
  end_time: string;
};

export type TokenSchema = {
  access_token: string;
  refresh_token: string;
};

/**
 * User properties returned by API. Contains private
 * user information such as email, is_active.
 *
 * Should only be returned to admins or self.
 */
export type User = {
  first_name?: string | null;
  last_name?: string | null;
  nick_name?: string | null;
  picture?: string | null;
  email?: string | null;
  is_active?: boolean | null;
  is_superuser?: boolean | null;
  uuid: string;
};

/**
 * User properties to receive via API on update.
 */
export type UserUpdate = {
  first_name?: string | null;
  last_name?: string | null;
  nick_name?: string | null;
  picture?: string | null;
  password?: string | null;
  email?: string | null;
  is_active?: boolean | null;
  is_superuser?: boolean | null;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type GetUsersData = {
  body?: never;
  path?: never;
  query?: {
    limit?: number | null;
    offset?: number | null;
  };
  url: "/api/v1/users";
};

export type GetUsersErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetUsersError = GetUsersErrors[keyof GetUsersErrors];

export type GetUsersResponses = {
  /**
   * Successful Response
   */
  200: Array<User>;
};

export type GetUsersResponse = GetUsersResponses[keyof GetUsersResponses];

export type RegisterUserData = {
  body: BodyRegisterUser;
  path?: never;
  query?: never;
  url: "/api/v1/users";
};

export type RegisterUserErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type RegisterUserError = RegisterUserErrors[keyof RegisterUserErrors];

export type RegisterUserResponses = {
  /**
   * Successful Response
   */
  200: User;
};

export type RegisterUserResponse =
  RegisterUserResponses[keyof RegisterUserResponses];

export type DeleteMeData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/me";
};

export type DeleteMeResponses = {
  /**
   * Successful Response
   */
  200: User;
};

export type DeleteMeResponse = DeleteMeResponses[keyof DeleteMeResponses];

export type GetMeData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/me";
};

export type GetMeResponses = {
  /**
   * Successful Response
   */
  200: User;
};

export type GetMeResponse = GetMeResponses[keyof GetMeResponses];

export type UpdateMeData = {
  body: UserUpdate;
  path?: never;
  query?: never;
  url: "/api/v1/users/me";
};

export type UpdateMeErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UpdateMeError = UpdateMeErrors[keyof UpdateMeErrors];

export type UpdateMeResponses = {
  /**
   * Successful Response
   */
  200: User;
};

export type UpdateMeResponse = UpdateMeResponses[keyof UpdateMeResponses];

export type DeleteUserByIdData = {
  body?: never;
  path: {
    userid: string;
  };
  query?: never;
  url: "/api/v1/users/{userid}";
};

export type DeleteUserByIdErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeleteUserByIdError =
  DeleteUserByIdErrors[keyof DeleteUserByIdErrors];

export type DeleteUserByIdResponses = {
  /**
   * Successful Response
   */
  200: User;
};

export type DeleteUserByIdResponse =
  DeleteUserByIdResponses[keyof DeleteUserByIdResponses];

export type GetUserByIdData = {
  body?: never;
  path: {
    userid: string;
  };
  query?: never;
  url: "/api/v1/users/{userid}";
};

export type GetUserByIdErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetUserByIdError = GetUserByIdErrors[keyof GetUserByIdErrors];

export type GetUserByIdResponses = {
  /**
   * Successful Response
   */
  200: User;
};

export type GetUserByIdResponse =
  GetUserByIdResponses[keyof GetUserByIdResponses];

export type UpdateUserByIdData = {
  body: UserUpdate;
  path: {
    userid: string;
  };
  query?: never;
  url: "/api/v1/users/{userid}";
};

export type UpdateUserByIdErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UpdateUserByIdError =
  UpdateUserByIdErrors[keyof UpdateUserByIdErrors];

export type UpdateUserByIdResponses = {
  /**
   * Successful Response
   */
  200: User;
};

export type UpdateUserByIdResponse =
  UpdateUserByIdResponses[keyof UpdateUserByIdResponses];

export type LoginData = {
  body: BodyLogin;
  path?: never;
  query?: never;
  url: "/api/v1/auth/login";
};

export type LoginErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type LoginError = LoginErrors[keyof LoginErrors];

export type LoginResponses = {
  /**
   * Successful Response
   */
  200: TokenSchema;
};

export type LoginResponse = LoginResponses[keyof LoginResponses];

export type TestTokenData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/auth/test-token";
};

export type TestTokenResponses = {
  /**
   * Successful Response
   */
  200: User;
};

export type TestTokenResponse = TestTokenResponses[keyof TestTokenResponses];

export type RefreshData = {
  body: string;
  path?: never;
  query?: never;
  url: "/api/v1/auth/refresh";
};

export type RefreshErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type RefreshError = RefreshErrors[keyof RefreshErrors];

export type RefreshResponses = {
  /**
   * Successful Response
   */
  200: TokenSchema;
};

export type RefreshResponse = RefreshResponses[keyof RefreshResponses];

export type CreateLogData = {
  body: BodyCreateLog;
  path?: never;
  query?: never;
  url: "/api/v1/logs";
};

export type CreateLogErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CreateLogError = CreateLogErrors[keyof CreateLogErrors];

export type CreateLogResponses = {
  /**
   * Successful Response
   */
  200: Log;
};

export type CreateLogResponse = CreateLogResponses[keyof CreateLogResponses];

export type GetLogsData = {
  body?: never;
  path?: never;
  query?: {
    limit?: number | null;
    offset?: number | null;
  };
  url: "/api/v1/logs/";
};

export type GetLogsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetLogsError = GetLogsErrors[keyof GetLogsErrors];

export type GetLogsResponses = {
  /**
   * Successful Response
   */
  200: Array<Log>;
};

export type GetLogsResponse = GetLogsResponses[keyof GetLogsResponses];

export type GetLogsHoursData = {
  body?: never;
  path?: never;
  query?: {
    limit?: number | null;
    offset?: number | null;
  };
  url: "/api/v1/logs/logs-hours";
};

export type GetLogsHoursErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetLogsHoursError = GetLogsHoursErrors[keyof GetLogsHoursErrors];

export type GetLogsHoursResponses = {
  /**
   * Successful Response
   */
  200: Array<LogHours>;
};

export type GetLogsHoursResponse =
  GetLogsHoursResponses[keyof GetLogsHoursResponses];

export type DeleteLogData = {
  body?: never;
  path: {
    logid: string;
  };
  query?: never;
  url: "/api/v1/logs/{logid}";
};

export type DeleteLogErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeleteLogError = DeleteLogErrors[keyof DeleteLogErrors];

export type DeleteLogResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type GetLogByIdData = {
  body?: never;
  path: {
    logid: string;
  };
  query?: never;
  url: "/api/v1/logs/{logid}";
};

export type GetLogByIdErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetLogByIdError = GetLogByIdErrors[keyof GetLogByIdErrors];

export type GetLogByIdResponses = {
  /**
   * Successful Response
   */
  200: Log;
};

export type GetLogByIdResponse = GetLogByIdResponses[keyof GetLogByIdResponses];

export type EditLogData = {
  body: LogUpdate;
  path: {
    logid: string;
  };
  query?: never;
  url: "/api/v1/logs/{logid}";
};

export type EditLogErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type EditLogError = EditLogErrors[keyof EditLogErrors];

export type EditLogResponses = {
  /**
   * Successful Response
   */
  200: Log;
};

export type EditLogResponse = EditLogResponses[keyof EditLogResponses];
