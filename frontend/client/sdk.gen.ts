// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser, urlSearchParamsBodySerializer } from '@hey-api/client-fetch';
import type { RegisterUserApiV1UsersPostData, RegisterUserApiV1UsersPostError, RegisterUserApiV1UsersPostResponse, GetUsersApiV1UsersGetData, GetUsersApiV1UsersGetError, GetUsersApiV1UsersGetResponse, GetProfileApiV1UsersMeGetError, GetProfileApiV1UsersMeGetResponse, DeleteMeApiV1UsersMeDeleteError, DeleteMeApiV1UsersMeDeleteResponse, UpdateProfileApiV1UsersMePatchData, UpdateProfileApiV1UsersMePatchError, UpdateProfileApiV1UsersMePatchResponse, UpdateUserApiV1UsersUseridPatchData, UpdateUserApiV1UsersUseridPatchError, UpdateUserApiV1UsersUseridPatchResponse, GetUserApiV1UsersUseridGetData, GetUserApiV1UsersUseridGetError, GetUserApiV1UsersUseridGetResponse, DeleteUserApiV1UsersUseridDeleteData, DeleteUserApiV1UsersUseridDeleteError, DeleteUserApiV1UsersUseridDeleteResponse, LoginApiV1AuthLoginPostData, LoginApiV1AuthLoginPostError, LoginApiV1AuthLoginPostResponse, TestTokenApiV1AuthTestTokenPostError, TestTokenApiV1AuthTestTokenPostResponse, RefreshTokenApiV1AuthRefreshPostData, RefreshTokenApiV1AuthRefreshPostError, RefreshTokenApiV1AuthRefreshPostResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Register User
 * Register a new user.
 */
export const registerUserApiV1UsersPost = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<RegisterUserApiV1UsersPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<RegisterUserApiV1UsersPostResponse, RegisterUserApiV1UsersPostError, ThrowOnError>({
        ...options,
        url: '/api/v1/users'
    });
};

/**
 * Get Users
 * Get all users
 *
 * ** Restricted to superuser **
 */
export const getUsersApiV1UsersGet = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetUsersApiV1UsersGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUsersApiV1UsersGetResponse, GetUsersApiV1UsersGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/users'
    });
};

/**
 * Get Profile
 * Get current user.
 */
export const getProfileApiV1UsersMeGet = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProfileApiV1UsersMeGetResponse, GetProfileApiV1UsersMeGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/me'
    });
};

/**
 * Delete Me
 * Delete current user.
 */
export const deleteMeApiV1UsersMeDelete = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteMeApiV1UsersMeDeleteResponse, DeleteMeApiV1UsersMeDeleteError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/me'
    });
};

/**
 * Update Profile
 * Update current user
 */
export const updateProfileApiV1UsersMePatch = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateProfileApiV1UsersMePatchData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateProfileApiV1UsersMePatchResponse, UpdateProfileApiV1UsersMePatchError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/me'
    });
};

/**
 * Update User
 * Update a user.
 *
 * ** Restricted to superuser **
 *
 * Parameters
 * ----------
 * userid : UUID
 * the user's UUID
 * update : schemas.UserUpdate
 * the update data
 * current_user : models.User, optional
 * the current superuser, by default Depends(get_current_active_superuser)
 */
export const updateUserApiV1UsersUseridPatch = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateUserApiV1UsersUseridPatchData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateUserApiV1UsersUseridPatchResponse, UpdateUserApiV1UsersUseridPatchError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/{userid}'
    });
};

/**
 * Get User
 * Get User Info
 *
 * ** Restricted to superuser **
 *
 * Parameters
 * ----------
 * userid : UUID
 * the user's UUID
 *
 * Returns
 * -------
 * schemas.User
 * User info
 */
export const getUserApiV1UsersUseridGet = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetUserApiV1UsersUseridGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUserApiV1UsersUseridGetResponse, GetUserApiV1UsersUseridGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/{userid}'
    });
};

/**
 * Delete User
 * Delete a user.
 *
 * ** Restricted to superuser **
 */
export const deleteUserApiV1UsersUseridDelete = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteUserApiV1UsersUseridDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteUserApiV1UsersUseridDeleteResponse, DeleteUserApiV1UsersUseridDeleteError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/{userid}'
    });
};

/**
 * Create access and refresh tokens for user
 */
export const loginApiV1AuthLoginPost = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<LoginApiV1AuthLoginPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<LoginApiV1AuthLoginPostResponse, LoginApiV1AuthLoginPostError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/api/v1/auth/login'
    });
};

/**
 * Test if the access token is valid
 */
export const testTokenApiV1AuthTestTokenPost = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).post<TestTokenApiV1AuthTestTokenPostResponse, TestTokenApiV1AuthTestTokenPostError, ThrowOnError>({
        ...options,
        url: '/api/v1/auth/test-token'
    });
};

/**
 * Refresh token
 */
export const refreshTokenApiV1AuthRefreshPost = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<RefreshTokenApiV1AuthRefreshPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<RefreshTokenApiV1AuthRefreshPostResponse, RefreshTokenApiV1AuthRefreshPostError, ThrowOnError>({
        ...options,
        url: '/api/v1/auth/refresh'
    });
};