// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
  urlSearchParamsBodySerializer,
} from "@hey-api/client-fetch";
import type {
  GetUsersData,
  GetUsersError,
  GetUsersResponse,
  RegisterUserData,
  RegisterUserError,
  RegisterUserResponse,
  DeleteMeData,
  DeleteMeResponse,
  GetMeData,
  GetMeResponse,
  UpdateMeData,
  UpdateMeError,
  UpdateMeResponse,
  DeleteUserByIdData,
  DeleteUserByIdError,
  DeleteUserByIdResponse,
  GetUserByIdData,
  GetUserByIdError,
  GetUserByIdResponse,
  UpdateUserByIdData,
  UpdateUserByIdError,
  UpdateUserByIdResponse,
  LoginData,
  LoginError,
  LoginResponse,
  TestTokenData,
  TestTokenResponse,
  RefreshData,
  RefreshError,
  RefreshResponse,
  CreateLogData,
  CreateLogError,
  CreateLogResponse,
  GetLogsData,
  GetLogsError,
  GetLogsResponse,
  GetLogsHoursData,
  GetLogsHoursError,
  GetLogsHoursResponse,
  DeleteLogData,
  DeleteLogError,
  GetLogByIdData,
  GetLogByIdError,
  GetLogByIdResponse,
  EditLogData,
  EditLogError,
  EditLogResponse,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Get Users
 * Get all users
 *
 * ** Restricted to superuser **
 */
export const getUsers = <ThrowOnError extends boolean = false>(
  options?: Options<GetUsersData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetUsersResponse,
    GetUsersError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        fn: "accessToken",
        in: "header",
        name: "Authorization",
      },
    ],
    url: "/api/v1/users",
  });
};

/**
 * Register User
 * Register a new user.
 */
export const registerUser = <ThrowOnError extends boolean = false>(
  options: Options<RegisterUserData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    RegisterUserResponse,
    RegisterUserError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    url: "/api/v1/users",
  });
};

/**
 * Delete Me
 * Delete current user.
 */
export const deleteMe = <ThrowOnError extends boolean = false>(
  options?: Options<DeleteMeData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteMeResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        fn: "accessToken",
        in: "header",
        name: "Authorization",
      },
    ],
    url: "/api/v1/users/me",
  });
};

/**
 * Get Profile
 * Get current user.
 */
export const getMe = <ThrowOnError extends boolean = false>(
  options?: Options<GetMeData, ThrowOnError>
) => {
  return (options?.client ?? client).get<GetMeResponse, unknown, ThrowOnError>({
    ...options,
    security: [
      {
        fn: "accessToken",
        in: "header",
        name: "Authorization",
      },
    ],
    url: "/api/v1/users/me",
  });
};

/**
 * Update Profile
 * Update current user
 */
export const updateMe = <ThrowOnError extends boolean = false>(
  options: Options<UpdateMeData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<
    UpdateMeResponse,
    UpdateMeError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        fn: "accessToken",
        in: "header",
        name: "Authorization",
      },
    ],
    url: "/api/v1/users/me",
  });
};

/**
 * Delete User
 * Delete a user.
 *
 * ** Restricted to superuser **
 */
export const deleteUserById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserByIdData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteUserByIdResponse,
    DeleteUserByIdError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        fn: "accessToken",
        in: "header",
        name: "Authorization",
      },
    ],
    url: "/api/v1/users/{userid}",
  });
};

/**
 * Get User
 * Get User Info
 *
 * ** Restricted to superuser **
 *
 * Parameters
 * ----------
 * userid : UUID
 * the user's UUID
 *
 * Returns
 * -------
 * schemas.User
 * User info
 */
export const getUserById = <ThrowOnError extends boolean = false>(
  options: Options<GetUserByIdData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetUserByIdResponse,
    GetUserByIdError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        fn: "accessToken",
        in: "header",
        name: "Authorization",
      },
    ],
    url: "/api/v1/users/{userid}",
  });
};

/**
 * Update User
 * Update a user.
 *
 * ** Restricted to superuser **
 *
 * Parameters
 * ----------
 * userid : UUID
 * the user's UUID
 * update : schemas.UserUpdate
 * the update data
 * current_user : models.User, optional
 * the current superuser, by default Depends(get_current_active_superuser)
 */
export const updateUserById = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserByIdData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<
    UpdateUserByIdResponse,
    UpdateUserByIdError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        fn: "accessToken",
        in: "header",
        name: "Authorization",
      },
    ],
    url: "/api/v1/users/{userid}",
  });
};

/**
 * Create access and refresh tokens for user
 */
export const login = <ThrowOnError extends boolean = false>(
  options: Options<LoginData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    LoginResponse,
    LoginError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
    url: "/api/v1/auth/login",
  });
};

/**
 * Test if the access token is valid
 */
export const testToken = <ThrowOnError extends boolean = false>(
  options?: Options<TestTokenData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    TestTokenResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        fn: "accessToken",
        in: "header",
        name: "Authorization",
      },
    ],
    url: "/api/v1/auth/test-token",
  });
};

/**
 * Refresh token
 */
export const refresh = <ThrowOnError extends boolean = false>(
  options: Options<RefreshData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    RefreshResponse,
    RefreshError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    url: "/api/v1/auth/refresh",
  });
};

/**
 * Create Log
 * Create new log for user.
 *
 * ** Restricted to current user **
 *
 * Parameters
 * ----------
 * start_time: datetime
 * entered start datetime
 *
 * end_time: datetime
 * entered end datetime
 *
 * Returns
 * -------
 * schemas.Log
 * Log info
 */
export const createLog = <ThrowOnError extends boolean = false>(
  options: Options<CreateLogData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateLogResponse,
    CreateLogError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        fn: "accessToken",
        in: "header",
        name: "Authorization",
      },
    ],
    url: "/api/v1/logs",
  });
};

/**
 * Get Logs
 * Get all logs for current user
 *
 * ** Restricted to current user **
 */
export const getLogs = <ThrowOnError extends boolean = false>(
  options?: Options<GetLogsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetLogsResponse,
    GetLogsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        fn: "accessToken",
        in: "header",
        name: "Authorization",
      },
    ],
    url: "/api/v1/logs/",
  });
};

/**
 * Get Logs
 * Get all logs for current user
 *
 * ** Restricted to current user **
 */
export const getLogsHours = <ThrowOnError extends boolean = false>(
  options?: Options<GetLogsHoursData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetLogsHoursResponse,
    GetLogsHoursError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        fn: "accessToken",
        in: "header",
        name: "Authorization",
      },
    ],
    url: "/api/v1/logs/logs-hours",
  });
};

/**
 * Delete Log
 * Delete a log.
 *
 * ** Restricted to current user **
 *
 * Parameters
 * ----------
 * logid: UUID
 *
 * Returns
 * -------
 * None
 */
export const deleteLog = <ThrowOnError extends boolean = false>(
  options: Options<DeleteLogData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    unknown,
    DeleteLogError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        fn: "accessToken",
        in: "header",
        name: "Authorization",
      },
    ],
    url: "/api/v1/logs/{logid}",
  });
};

/**
 * Get Log
 * Create new log for user.
 *
 * ** Restricted to current user **
 *
 * Parameters
 * ----------
 * logid: UUID
 * The logs id
 *
 * Returns
 * -------
 * schemas.Log
 * Log info
 */
export const getLogById = <ThrowOnError extends boolean = false>(
  options: Options<GetLogByIdData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetLogByIdResponse,
    GetLogByIdError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        fn: "accessToken",
        in: "header",
        name: "Authorization",
      },
    ],
    url: "/api/v1/logs/{logid}",
  });
};

/**
 * Edit Log
 * Edit a log for user.
 *
 * ** Restricted to current user **
 *
 * Parameters
 * ----------
 * logid: UUID
 * update: starttime, endtime
 *
 * Returns
 * -------
 * schemas.Log
 * Log info
 */
export const editLog = <ThrowOnError extends boolean = false>(
  options: Options<EditLogData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<
    EditLogResponse,
    EditLogError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        fn: "accessToken",
        in: "header",
        name: "Authorization",
      },
    ],
    url: "/api/v1/logs/{logid}",
  });
};
