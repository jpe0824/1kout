// This file is auto-generated by @hey-api/openapi-ts

export const Body_login_api_v1_auth_login_postSchema = {
    properties: {
        grant_type: {
            anyOf: [
                {
                    type: 'string',
                    pattern: 'password'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grant Type'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        scope: {
            type: 'string',
            title: 'Scope',
            default: ''
        },
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Secret'
        }
    },
    type: 'object',
    required: ['username', 'password'],
    title: 'Body_login_api_v1_auth_login_post'
} as const;

export const Body_register_user_api_v1_users_postSchema = {
    properties: {
        password: {
            type: 'string',
            title: 'Password'
        },
        email: {
            type: 'string',
            title: 'Email'
        },
        first_name: {
            type: 'string',
            title: 'First Name'
        },
        last_name: {
            type: 'string',
            title: 'Last Name'
        },
        nick_name: {
            type: 'string',
            title: 'Nick Name'
        }
    },
    type: 'object',
    required: ['password', 'email'],
    title: 'Body_register_user_api_v1_users_post'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const TokenSchemaSchema = {
    properties: {
        access_token: {
            type: 'string',
            title: 'Access Token'
        },
        refresh_token: {
            type: 'string',
            title: 'Refresh Token'
        }
    },
    type: 'object',
    required: ['access_token', 'refresh_token'],
    title: 'TokenSchema'
} as const;

export const UserSchema = {
    properties: {
        first_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'First Name'
        },
        last_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Name'
        },
        nick_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nick Name'
        },
        picture: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Picture'
        },
        email: {
            anyOf: [
                {
                    type: 'string',
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        is_active: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Active'
        },
        is_superuser: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Superuser'
        },
        uuid: {
            type: 'string',
            format: 'uuid',
            title: 'Uuid'
        }
    },
    type: 'object',
    required: ['uuid'],
    title: 'User',
    description: `User properties returned by API. Contains private
user information such as email, is_active.

Should only be returned to admins or self.`
} as const;

export const UserUpdateSchema = {
    properties: {
        first_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'First Name'
        },
        last_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Name'
        },
        nick_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nick Name'
        },
        picture: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Picture'
        },
        password: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Password'
        },
        email: {
            anyOf: [
                {
                    type: 'string',
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        is_active: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Active'
        },
        is_superuser: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Superuser'
        }
    },
    type: 'object',
    title: 'UserUpdate',
    description: 'User properties to receive via API on update.'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;