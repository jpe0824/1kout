{
  "openapi": "3.1.0",
  "info": {
    "title": "1kOutside",
    "description": "OpenAPI Schema for 1kOut",
    "version": "0.0.1"
  },
  "paths": {
    "/api/v1/users": {
      "post": {
        "tags": ["users"],
        "summary": "Register User",
        "description": "Register a new user.",
        "operationId": "register_user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_register_user"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["users"],
        "summary": "Get Users",
        "description": "Get all users\n\n** Restricted to superuser **",
        "operationId": "get_users",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  },
                  "title": "Response Get Users"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/me": {
      "get": {
        "tags": ["users"],
        "summary": "Get Profile",
        "description": "Get current user.",
        "operationId": "get_me",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "delete": {
        "tags": ["users"],
        "summary": "Delete Me",
        "description": "Delete current user.",
        "operationId": "delete_me",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "patch": {
        "tags": ["users"],
        "summary": "Update Profile",
        "description": "Update current user",
        "operationId": "update_me",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/v1/users/{userid}": {
      "patch": {
        "tags": ["users"],
        "summary": "Update User",
        "description": "Update a user.\n\n** Restricted to superuser **\n\nParameters\n----------\nuserid : UUID\n    the user's UUID\nupdate : schemas.UserUpdate\n    the update data\ncurrent_user : models.User, optional\n    the current superuser, by default Depends(get_current_active_superuser)",
        "operationId": "update_user_by_id",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Userid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["users"],
        "summary": "Get User",
        "description": "Get User Info\n\n** Restricted to superuser **\n\nParameters\n----------\nuserid : UUID\n    the user's UUID\n\nReturns\n-------\nschemas.User\n    User info",
        "operationId": "get_user_by_id",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Userid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["users"],
        "summary": "Delete User",
        "description": "Delete a user.\n\n** Restricted to superuser **",
        "operationId": "delete_user_by_id",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Userid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "tags": ["auth"],
        "summary": "Create access and refresh tokens for user",
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_login"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/test-token": {
      "post": {
        "tags": ["auth"],
        "summary": "Test if the access token is valid",
        "operationId": "test_token",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/v1/auth/refresh": {
      "post": {
        "tags": ["auth"],
        "summary": "Refresh token",
        "operationId": "refresh",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "title": "Refresh Token"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/logs": {
      "post": {
        "tags": ["logs"],
        "summary": "Create Log",
        "description": "Create new log for user.\n\n** Restricted to current user **\n\nParameters\n----------\nstart_time: datetime\n    entered start datetime\n\nend_time: datetime\n    entered end datetime\n\nReturns\n-------\nschemas.Log\n    Log info",
        "operationId": "create_log",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_log"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Log"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/v1/logs/": {
      "get": {
        "tags": ["logs"],
        "summary": "Get Logs",
        "description": "Get all logs for current user\n\n** Restricted to current user **",
        "operationId": "get_logs",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Log"
                  },
                  "title": "Response Get Logs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/logs/logs-hours": {
      "get": {
        "tags": ["logs"],
        "summary": "Get Logs Hours",
        "description": "Get all logs for current user\n\n** Restricted to current user **",
        "operationId": "get_logs_hours",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogHours"
                  },
                  "title": "Response Get Logs Hours"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/logs/hours-total": {
      "get": {
        "tags": ["logs"],
        "summary": "Get Hours",
        "operationId": "get_total_hours",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TotalHours"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/v1/logs/{logid}": {
      "get": {
        "tags": ["logs"],
        "summary": "Get Log",
        "description": "Create new log for user.\n\n** Restricted to current user **\n\nParameters\n----------\nlogid: UUID\n    The logs id\n\nReturns\n-------\nschemas.Log\n    Log info",
        "operationId": "get_log_by_id",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "logid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Logid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Log"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["logs"],
        "summary": "Edit Log",
        "description": "Edit a log for user.\n\n** Restricted to current user **\n\nParameters\n----------\nlogid: UUID\nupdate: starttime, endtime\n\nReturns\n-------\nschemas.Log\n    Log info",
        "operationId": "edit_log",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "logid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Logid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Log"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["logs"],
        "summary": "Delete Log",
        "description": "Delete a log.\n\n** Restricted to current user **\n\nParameters\n----------\nlogid: UUID\n\nReturns\n-------\nNone",
        "operationId": "delete_log",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "logid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Logid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/leaderboards": {
      "post": {
        "tags": ["leaderboards"],
        "summary": "Create Leaderboard",
        "description": "Creates a new leaderboard\n\n** Restricted to current and logged in user**\n\nParameters\n----------\nleaderboard_name: str, unique\n\nReturns\n-------\nschemas.Leaderboard",
        "operationId": "create_leaderboard",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_leaderboard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Leaderboard"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/v1/leaderboards/owned": {
      "get": {
        "tags": ["leaderboards"],
        "summary": "Get Owned Leaderboards",
        "description": "Get all leaderboards for current user\n\n** Restricted to current user **\n\nReturns\n-------\nlist schema.Leaderboard",
        "operationId": "get_owned_leaderboards",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Leaderboard"
                  },
                  "title": "Response Get Owned Leaderboards"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/leaderboards/joined": {
      "get": {
        "tags": ["leaderboards"],
        "summary": "Get Joined Leaderboards",
        "description": "Get all leaderboards for current user\n\n** Restricted to current user **\n\nReturns\n-------\nlist schema.Leaderboard",
        "operationId": "get_joined_leaderboards",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Leaderboard"
                  },
                  "title": "Response Get Joined Leaderboards"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/leaderboards/add": {
      "patch": {
        "tags": ["leaderboards"],
        "summary": "Add User",
        "description": "Add a user to a leaderboard\n\n** Restricted to current user **\n\nParameters\n----------\ninvite_code: str\n    the unique invite code for a leaderboard\n\nReturns\n-------\nschemas.Leaderboard",
        "operationId": "add_user",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "invite_code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Invite Code"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Leaderboard"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/leaderboards/remove": {
      "patch": {
        "tags": ["leaderboards"],
        "summary": "Remove User",
        "description": "Remove a user from leaderboard\n\n** Restricted to leaderboard owner **\n\nParameters\n----------\nleaderboardId: UUID,\nuserId: UUID\n\nReturns\n-------\nschemas.Leaderboard",
        "operationId": "remove_user",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "leaderboardId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Leaderboardid"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Userid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Leaderboard"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/leaderboards/remove/me": {
      "patch": {
        "tags": ["leaderboards"],
        "summary": "Remove Me",
        "description": "Remove self from leaderboard\n\n** Restricted to current user **\n\nParameters\n----------\nleaderboardId: UUID,\n\nReturns\n-------\nschemas.Leaderboard",
        "operationId": "remove_me",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "leaderboardId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Leaderboardid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Leaderboard"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/leaderboards/{leaderboardId}": {
      "get": {
        "tags": ["leaderboards"],
        "summary": "Get Leaderboard Data",
        "description": "Get a leaderboard users data by it's ID\n\n** Restricted to current user **\n\nParameters\n----------\nleaderboardId: UUID\n\nReturns\n-------\nlist schema.PublicUser",
        "operationId": "get_leaderboard_data",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "leaderboardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Leaderboardid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderboardData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["leaderboards"],
        "summary": "Edit Leaderboard",
        "description": "Edit a leaderboard\n\n** Restricted to current user/owner of leaderboard **\n\nParameters\n----------\nleaderboardId: UUID\nupdate: leaderboard_name, is_active, picture, invite_code\n\nReturns\n-------\nschemas.Leaderboard",
        "operationId": "edit_leaderboard",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "leaderboardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Leaderboardid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeaderboardUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Leaderboard"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["leaderboards"],
        "summary": "Delete Leaderboard",
        "description": "Delete a leaderboard.\n\n** Restricted to current user **\n\nParameters\n----------\nleaderboardId: UUID\n\nReturns\n-------\nNone",
        "operationId": "delete_leaderboard",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "leaderboardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Leaderboardid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Body_create_leaderboard": {
        "properties": {
          "leaderboard_name": {
            "type": "string",
            "title": "Leaderboard Name"
          },
          "picture": {
            "type": "string",
            "title": "Picture"
          }
        },
        "type": "object",
        "required": ["leaderboard_name"],
        "title": "Body_create_leaderboard"
      },
      "Body_create_log": {
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start Time"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "title": "End Time"
          }
        },
        "type": "object",
        "required": ["start_time", "end_time"],
        "title": "Body_create_log"
      },
      "Body_login": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "password"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": ["username", "password"],
        "title": "Body_login"
      },
      "Body_register_user": {
        "properties": {
          "password": {
            "type": "string",
            "title": "Password"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "first_name": {
            "type": "string",
            "title": "First Name"
          },
          "last_name": {
            "type": "string",
            "title": "Last Name"
          },
          "nick_name": {
            "type": "string",
            "title": "Nick Name"
          }
        },
        "type": "object",
        "required": ["password", "email"],
        "title": "Body_register_user"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "Leaderboard": {
        "properties": {
          "leaderboard_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Leaderboard Name"
          },
          "picture": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Picture"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          },
          "invite_code": {
            "type": "string",
            "title": "Invite Code"
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid"
          }
        },
        "type": "object",
        "required": ["invite_code", "uuid"],
        "title": "Leaderboard"
      },
      "LeaderboardData": {
        "properties": {
          "leaderboard_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Leaderboard Name"
          },
          "picture": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Picture"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          },
          "invite_code": {
            "type": "string",
            "title": "Invite Code"
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid"
          },
          "users_data": {
            "items": {
              "$ref": "#/components/schemas/PublicUser"
            },
            "type": "array",
            "title": "Users Data"
          }
        },
        "type": "object",
        "required": ["invite_code", "uuid", "users_data"],
        "title": "LeaderboardData"
      },
      "LeaderboardUpdate": {
        "properties": {
          "leaderboard_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Leaderboard Name"
          },
          "picture": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Picture"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          },
          "invite_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Invite Code"
          }
        },
        "type": "object",
        "title": "LeaderboardUpdate"
      },
      "Log": {
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start Time"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "title": "End Time"
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid"
          }
        },
        "type": "object",
        "required": ["start_time", "end_time", "uuid"],
        "title": "Log",
        "description": "Log properties returned by API"
      },
      "LogHours": {
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start Time"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "title": "End Time"
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid"
          },
          "hours": {
            "type": "string",
            "title": "Hours"
          }
        },
        "type": "object",
        "required": ["start_time", "end_time", "uuid", "hours"],
        "title": "LogHours"
      },
      "LogUpdate": {
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start Time"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "title": "End Time"
          }
        },
        "type": "object",
        "required": ["start_time", "end_time"],
        "title": "LogUpdate",
        "description": "Same properties as logbase"
      },
      "PublicUser": {
        "properties": {
          "first_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "First Name"
          },
          "last_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Name"
          },
          "nick_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Nick Name"
          },
          "picture": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Picture"
          },
          "hours": {
            "type": "string",
            "title": "Hours"
          }
        },
        "type": "object",
        "required": ["hours"],
        "title": "PublicUser",
        "description": "Shared user properties and hours"
      },
      "TokenSchema": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "refresh_token": {
            "type": "string",
            "title": "Refresh Token"
          }
        },
        "type": "object",
        "required": ["access_token", "refresh_token"],
        "title": "TokenSchema"
      },
      "TotalHours": {
        "properties": {
          "hours": {
            "type": "string",
            "title": "Hours"
          }
        },
        "type": "object",
        "required": ["hours"],
        "title": "TotalHours"
      },
      "User": {
        "properties": {
          "first_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "First Name"
          },
          "last_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Name"
          },
          "nick_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Nick Name"
          },
          "picture": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Picture"
          },
          "email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          },
          "is_superuser": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Superuser"
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid"
          }
        },
        "type": "object",
        "required": ["uuid"],
        "title": "User",
        "description": "User properties returned by API. Contains private\nuser information such as email, is_active.\n\nShould only be returned to admins or self."
      },
      "UserUpdate": {
        "properties": {
          "first_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "First Name"
          },
          "last_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Name"
          },
          "nick_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Nick Name"
          },
          "picture": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Picture"
          },
          "password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Password"
          },
          "email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          },
          "is_superuser": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Superuser"
          }
        },
        "type": "object",
        "title": "UserUpdate",
        "description": "User properties to receive via API on update."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "JWT": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "/api/v1/auth/login"
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "http://localhost:8000"
    }
  ]
}
